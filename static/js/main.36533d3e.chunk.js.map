{"version":3,"sources":["component/MyMap.js","component/App.js","serviceWorker.js","index.js"],"names":["MyMap","zoom","source","VectorSource","wrapX","vector","VectorLayer","map","Map","target","layers","TileLayer","OSM","view","View","projection","center","fromLonLat","draw","addInteraction","e","removeInteraction","getAttribute","Draw","type","getLayers","array_","getSource","clear","className","name","onClick","getView","setZoom","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iXAwFeA,EA1ED,WACV,IAAIC,EAAO,EAEPC,EAAS,IAAIC,IAAa,CAACC,OAAO,IAElCC,EAAS,IAAIC,IAAY,CACzBJ,OAAQA,IAGNK,EAAM,IAAIC,IAAI,CAChBC,OAAQ,MACRC,OAAQ,CACN,IAAIC,IAAU,CACZT,OAAQ,IAAIU,MAEfP,GACDQ,KAAM,IAAIC,IAAK,CACbC,WAAY,YACZC,OAAQC,YAAW,CAAC,IAAI,IAAI,aAC5BhB,KAAMA,MAwBRiB,EAAO,KACLC,EAAiB,SAACC,GACT,MAARF,GACCX,EAAIc,kBAAkBH,GAGZ,SADFE,EAAEX,OAAOa,aAAa,SAE9BJ,EAAO,IAAIK,IAAK,CAChBrB,OAAQA,EACRsB,KAAMJ,EAAEX,OAAOa,aAAa,UAE5Bf,EAAIY,eAAeD,IAEnBX,EAAIkB,YAAYC,OAAO,GAAGC,YAAYC,SAI9C,OACI,yBAAKC,UAAU,WACX,0BAAMA,UAAU,aAAaC,KAAK,QAAQC,QAASZ,GAAnD,SACA,0BAAMU,UAAU,aAAaC,KAAK,aAAaC,QAASZ,GAAxD,QACA,0BAAMU,UAAU,aAAaC,KAAK,UAAUC,QAASZ,GAArD,WACA,0BAAMU,UAAU,aAAaC,KAAK,OAAOC,QAASZ,GAAlD,QACA,0BAAMU,UAAU,aAAaC,KAAK,SAASC,QA3CpC,WACR9B,EAAO,IACNA,GAAc,EACdM,EAAIyB,UAAUC,QAAQhC,GACtBiC,QAAQC,IAAIlC,IAEZiC,QAAQC,IAAI,eAqCZ,UACA,0BAAMN,UAAU,aAAaC,KAAK,UAAUC,QAlCpC,WACT9B,EAAO,GACNA,GAAc,EACdM,EAAIyB,UAAUC,QAAQhC,GACtBiC,QAAQC,IAAIlC,IAEZiC,QAAQC,IAAI,eA4BZ,aClEGC,EAVH,WACV,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,QD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.36533d3e.chunk.js","sourcesContent":["import React,{ useState } from 'react';\r\nimport '../css/BtnStyle.css';\r\n\r\n\r\nimport 'ol/ol.css';\r\nimport {Map, View} from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport OSM from 'ol/source/OSM';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport Draw from 'ol/interaction/Draw';\r\nimport {fromLonLat} from 'ol/proj'\r\n\r\n\r\nconst MyMap = () => {\r\n    let zoom = 4;\r\n    \r\n    let source = new VectorSource({wrapX: false});\r\n\r\n    let vector = new VectorLayer({\r\n        source: source\r\n    });\r\n\r\n    const map = new Map({\r\n        target: 'map',\r\n        layers: [\r\n          new TileLayer({\r\n            source: new OSM()\r\n          })\r\n        ,vector],\r\n        view: new View({\r\n          projection: 'EPSG:3857',\r\n          center: fromLonLat([127,36],\"EPSG:3857\"),\r\n          zoom: zoom\r\n        })\r\n      });\r\n\r\n    const zoomIn = () =>{\r\n        if(zoom < 14){\r\n            zoom = zoom + 1\r\n            map.getView().setZoom(zoom);\r\n            console.log(zoom);\r\n        }else{\r\n            console.log(\"zoom fail\");\r\n        }\r\n    }\r\n\r\n    const zoomOut = () =>{\r\n        if(zoom > 4){\r\n            zoom = zoom - 1\r\n            map.getView().setZoom(zoom);\r\n            console.log(zoom);\r\n        }else{\r\n            console.log(\"zoom fail\");\r\n        }\r\n    }\r\n\r\n    let draw = null;\r\n    const addInteraction = (e) => {\r\n        if(draw != null){\r\n            map.removeInteraction(draw);\r\n        }\r\n        let value = e.target.getAttribute(\"name\");\r\n        if (value !== 'None') {\r\n            draw = new Draw({\r\n            source: source,\r\n            type: e.target.getAttribute(\"name\")\r\n            });\r\n            map.addInteraction(draw);\r\n        }else{\r\n            map.getLayers().array_[1].getSource().clear();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"btnArea\">\r\n            <span className=\"featureBtn\" name=\"Point\" onClick={addInteraction}>Point</span>\r\n            <span className=\"featureBtn\" name=\"LineString\" onClick={addInteraction}>Line</span>\r\n            <span className=\"featureBtn\" name=\"Polygon\" onClick={addInteraction}>Polygon</span>\r\n            <span className=\"featureBtn\" name=\"None\" onClick={addInteraction}>None</span>\r\n            <span className=\"featureBtn\" name=\"ZoomIn\" onClick = {zoomIn}>ZoomIn</span>\r\n            <span className=\"featureBtn\" name=\"ZoomOut\" onClick = {zoomOut}>ZoomOut</span>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default MyMap;","import React, { Fragment } from 'react';\r\nimport '../App.css';\r\nimport MyMap from './MyMap';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <Fragment>\r\n      <MyMap/>\r\n    </Fragment>\r\n    \r\n  );\r\n};\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('map'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}